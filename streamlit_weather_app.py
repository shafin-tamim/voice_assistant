import streamlit as st
import speech_recognition as sr
from gtts import gTTS  # Changed from 'gTTS import gTTS'
import requests
import io
import time

class StreamlitWeatherAssistant:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.recognizer.energy_threshold = 4000  # Adjust microphone sensitivity
        self.recognizer.dynamic_energy_threshold = True
        self.weather_api_key = st.secrets["weather_api_key"]
        self.city = "Dhaka"
        self.weather_keywords = ["‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ", "‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ", "‡¶¨‡¶æ‡¶§‡¶æ‡¶∏", "weather"]
        self.cities = {
            "‡¶¢‡¶æ‡¶ï‡¶æ": "Dhaka",
            "‡¶ö‡¶ü‡ßç‡¶ü‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ": "Chittagong",
            "‡¶ñ‡ßÅ‡¶≤‡¶®‡¶æ": "Khulna",
            "‡¶∞‡¶æ‡¶ú‡¶∂‡¶æ‡¶π‡ßÄ": "Rajshahi",
            "‡¶∏‡¶ø‡¶≤‡ßá‡¶ü": "Sylhet",
            "‡¶¨‡¶∞‡¶ø‡¶∂‡¶æ‡¶≤": "Barisal",
            "‡¶∞‡¶Ç‡¶™‡ßÅ‡¶∞": "Rangpur",
            "‡¶Æ‡¶Ø‡¶º‡¶Æ‡¶®‡¶∏‡¶ø‡¶Ç‡¶π": "Mymensingh"
        }

    def contains_weather_keywords(self, text):
        return any(keyword in text.lower() for keyword in self.weather_keywords)

    def get_weather(self):
        try:
            # Correct API endpoint
            url = (
                "https://api.openweathermap.org/data/2.5/weather"
                f"?q={self.city}"
                f"&appid={self.weather_api_key.strip()}"
                "&units=metric"
            )
            
            # Print debug info before request
            print(f"Requesting URL: {url}")
            
            response = requests.get(url, timeout=10)
            
            try:
                data = response.json()
                print(f"Status Code: {response.status_code}")
                print(f"Response: {data}")
            except ValueError as e:
                print(f"JSON Decode Error: {e}")
                return False, "‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá"
            
            if response.status_code == 200:
                temp = round(data['main']['temp'])
                humidity = data['main']['humidity']
                feels_like = round(data['main']['feels_like'])
                
                weather_text = (
                    f"‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ {temp} ‡¶°‡¶ø‡¶ó‡ßç‡¶∞‡¶ø ‡¶∏‡ßá‡¶≤‡¶∏‡¶ø‡¶Ø‡¶º‡¶æ‡¶∏‡•§\n"
                    f"‡¶Ö‡¶®‡ßÅ‡¶≠‡ßÇ‡¶§ ‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ {feels_like} ‡¶°‡¶ø‡¶ó‡ßç‡¶∞‡¶ø ‡¶∏‡ßá‡¶≤‡¶∏‡¶ø‡¶Ø‡¶º‡¶æ‡¶∏‡•§\n"
                    f"‡¶Ü‡¶∞‡ßç‡¶¶‡ßç‡¶∞‡¶§‡¶æ {humidity} ‡¶∂‡¶§‡¶æ‡¶Ç‡¶∂‡•§"
                )
                return True, weather_text
            elif response.status_code == 401:
                return False, "API ‡¶ï‡ßÄ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡•§ ‡¶ï‡ßÄ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
            elif response.status_code == 404:
                return False, "‡¶∂‡¶π‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø"
            else:
                return False, f"‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {response.status_code}"
                
        except requests.Timeout:
            return False, "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶ü‡¶æ‡¶á‡¶Æ ‡¶Ü‡¶â‡¶ü"
        except requests.ConnectionError:
            return False, "‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶®‡ßá‡¶á"
        except Exception as e:
            print(f"Error details: {str(e)}")
            return False, "‡¶Ö‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá"

    def text_to_speech(self, text):
        try:
            tts = gTTS(text=text, lang='bn', slow=False)
            audio_buffer = io.BytesIO()
            tts.write_to_fp(audio_buffer)
            audio_buffer.seek(0)
            return True, audio_buffer
        except Exception as e:
            return False, f"Error in speech synthesis: {str(e)}"

    def listen_for_speech(self):
        with sr.Microphone() as source:
            self.recognizer.adjust_for_ambient_noise(source, duration=1)
            try:
                audio = self.recognizer.listen(source, timeout=10, phrase_time_limit=5)
                return True, audio
            except sr.WaitTimeoutError:
                return False, "‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÄ‡¶Æ‡¶æ ‡¶∂‡ßá‡¶∑, ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®"
            except Exception as e:
                return False, str(e)

def initialize_session_state():
    if 'recording' not in st.session_state:
        st.session_state.recording = False
    if 'last_query' not in st.session_state:
        st.session_state.last_query = None
    if 'weather_info' not in st.session_state:
        st.session_state.weather_info = None

def main():
    st.set_page_config(
        page_title="‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶∏‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ",
        page_icon="üå§Ô∏è",
        layout="centered"
    )
    
    initialize_session_state()
    
    # Custom CSS
    st.markdown("""
        <style>
        .main {
            padding: 1rem;
        }
        .stButton>button {
            width: 100%;
            margin: 0.5rem 0;
        }
        </style>
    """, unsafe_allow_html=True)
    
    st.title("‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶∏‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ üå§Ô∏è")
    
    assistant = StreamlitWeatherAssistant()

    # Main layout without city selection
    with st.expander("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶ø‡¶ï‡¶æ ‚ÑπÔ∏è"):
        selected_city = st.selectbox(
            "‡¶∂‡¶π‡¶∞",
            options=list(assistant.cities.keys()),
            format_func=lambda x: x
        )
        assistant.city = assistant.cities[selected_city]
        st.markdown("1. ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡ßÅ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®")
        st.markdown("2. ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶ú‡¶æ‡¶®‡¶§‡ßá '‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ' ‡¶∂‡¶¨‡ßç‡¶¶‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®")

    # Main content
    tab1, tab2 = st.tabs(["üé§ ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏", "‚å®Ô∏è ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü"])
    
    with tab1:
        st.markdown("##### ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡ßá ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ú‡¶æ‡¶®‡ßÅ‡¶®")
        if st.button("üéôÔ∏è ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡ßÅ‡¶®", key="voice_button"):
            with st.spinner("‡¶∂‡ßÅ‡¶®‡¶õ‡¶ø..."):
                try:
                    st.session_state.recording = True
                    success, result = assistant.listen_for_speech()
                    
                    if not success:
                        st.error(result)
                        return
                        
                    audio = result
                    with st.spinner("‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶∞‡¶£ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."):
                        text = assistant.recognizer.recognize_google(audio, language='bn-BD')
                        st.session_state.last_query = text
                        
                        if assistant.contains_weather_keywords(text):
                            success, weather_info = assistant.get_weather()
                            if success:
                                st.success(f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: {text}")
                                st.write(weather_info)
                                success, audio_buffer = assistant.text_to_speech(weather_info)
                                if success:
                                    st.audio(audio_buffer, format='audio/mp3', start_time=0)
                            else:
                                st.error(weather_info)
                        else:
                            st.warning("‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶∏‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®")
                            
                except sr.UnknownValueError:
                    st.warning("‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∂‡ßÅ‡¶®‡¶§‡ßá ‡¶™‡¶æ‡¶á‡¶®‡¶ø, ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®")
                except sr.RequestError:
                    st.error("‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ, ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®")
                except Exception as e:
                    st.error(f"‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {str(e)}")
                finally:
                    st.session_state.recording = False

    with tab2:
        st.markdown("##### ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ú‡¶æ‡¶®‡ßÅ‡¶®")
        query = st.text_input("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®", placeholder="‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ï‡ßá‡¶Æ‡¶®?", key="text_input")
        
        if st.button("‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶á", key="text_button") and query:
            if assistant.contains_weather_keywords(query):
                success, weather_info = assistant.get_weather()
                if success:
                    st.write(weather_info)
                    success, audio_buffer = assistant.text_to_speech(weather_info)
                    if success:
                        st.audio(audio_buffer, format='audio/mp3')
                else:
                    st.error(weather_info)
            else:
                st.warning("‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶∏‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®")

    # Footer
    st.markdown("---")
    st.markdown("### ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶õ‡ßá: Shafin Tamim")

if __name__ == "__main__":
    main()
